{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javis\\\\Desktop\\\\Proyecto de Tests\\\\personal-testing-app\\\\src\\\\ImportTxtQuestions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst temas = [...Array.from({\n  length: 10\n}, (_, i) => ({\n  value: `Tema ${i + 1}`,\n  label: `Parte General - Tema ${i + 1}`\n})), ...Array.from({\n  length: 31\n}, (_, i) => ({\n  value: `Tema ${i + 11}`,\n  label: `Parte Específica - Tema ${i + 11}`\n}))];\nfunction ImportTxtQuestions({\n  onImport\n}) {\n  _s();\n  const [tema, setTema] = useState(temas[0].value);\n  const handleFileUpload = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      var _event$target;\n      const content = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n      const questions = parseQuestions(content);\n      if (questions.length > 0) {\n        onImport(questions);\n        alert(`Se importaron ${questions.length} preguntas correctamente.`);\n      } else {\n        alert(\"No se encontraron preguntas válidas en el archivo.\");\n      }\n    };\n    reader.readAsText(file, 'utf-8');\n  };\n  const parseQuestions = content => {\n    const questions = [];\n\n    // Dividir por líneas en blanco (doble salto de línea)\n    const questionBlocks = content.split(/\\n\\s*\\n/).filter(block => block.trim());\n    questionBlocks.forEach(block => {\n      const lines = block.trim().split('\\n').map(line => line.trim());\n      let questionText = \"\";\n      const options = [];\n      let correctAnswer = \"\";\n      lines.forEach(line => {\n        if (line.toLowerCase().startsWith('pregunta:')) {\n          questionText = line.substring(9).trim(); // Quitar \"Pregunta:\"\n        } else if (line.match(/^\\*?[a-d]:/i)) {\n          // Verificar si la línea empieza con asterisco\n          const isCorrect = line.startsWith('*');\n\n          // Obtener la letra (con o sin asterisco)\n          const letter = isCorrect ? line.charAt(1).toUpperCase() : line.charAt(0).toUpperCase();\n\n          // Obtener el texto de la opción (saltando \"a:\" o \"*a:\")\n          const optionText = isCorrect ? line.substring(3).trim() : line.substring(2).trim();\n          if (isCorrect) {\n            correctAnswer = letter;\n          }\n          options.push(optionText);\n        }\n      });\n\n      // Validar que tenemos todos los datos necesarios\n      if (questionText && options.length === 4 && correctAnswer) {\n        questions.push({\n          tema,\n          question: questionText,\n          options,\n          answer: correctAnswer\n        });\n      }\n    });\n    return questions;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: \"#fff\",\n      padding: 16,\n      borderRadius: 8,\n      marginBottom: 24\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Importar preguntas desde archivo TXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Tema para todas las preguntas:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: tema,\n          onChange: e => setTema(e.target.value),\n          children: temas.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: t.value,\n            children: t.label\n          }, t.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Seleccionar archivo TXT:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          onChange: handleFileUpload,\n          style: {\n            marginLeft: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#f5f5f5\",\n        padding: 12,\n        borderRadius: 4,\n        fontSize: \"0.9em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Formato esperado:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `Pregunta: ¿Cuál es la capital de Francia?\na: Madrid\n*b: París\nc: Londres\nd: Roma\n\nPregunta: ¿Cuál es la capital de España?\n*a: Madrid\nb: Barcelona\nc: Valencia\nd: Sevilla`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Nota:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 12\n        }, this), \" La respuesta correcta debe empezar con asterisco (*)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(ImportTxtQuestions, \"fTCvmT8PqmbcMV9bSdCFsqtQCok=\");\n_c = ImportTxtQuestions;\nexport default ImportTxtQuestions;\nvar _c;\n$RefreshReg$(_c, \"ImportTxtQuestions\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","temas","Array","from","length","_","i","value","label","ImportTxtQuestions","onImport","_s","tema","setTema","handleFileUpload","e","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","content","result","questions","parseQuestions","alert","readAsText","questionBlocks","split","filter","block","trim","forEach","lines","map","line","questionText","options","correctAnswer","toLowerCase","startsWith","substring","match","isCorrect","letter","charAt","toUpperCase","optionText","push","question","answer","style","background","padding","borderRadius","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","t","type","accept","marginLeft","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/javis/Desktop/Proyecto de Tests/personal-testing-app/src/ImportTxtQuestions.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Question } from \"./types\";\r\n\r\nconst temas = [\r\n  ...Array.from({ length: 10 }, (_, i) => ({ value: `Tema ${i + 1}`, label: `Parte General - Tema ${i + 1}` })),\r\n  ...Array.from({ length: 31 }, (_, i) => ({ value: `Tema ${i + 11}`, label: `Parte Específica - Tema ${i + 11}` })),\r\n];\r\n\r\nfunction ImportTxtQuestions({ onImport }: { onImport: (qs: Question[]) => void }) {\r\n  const [tema, setTema] = useState(temas[0].value);\r\n\r\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const content = event.target?.result as string;\r\n      const questions = parseQuestions(content);\r\n      if (questions.length > 0) {\r\n        onImport(questions);\r\n        alert(`Se importaron ${questions.length} preguntas correctamente.`);\r\n      } else {\r\n        alert(\"No se encontraron preguntas válidas en el archivo.\");\r\n      }\r\n    };\r\n    reader.readAsText(file, 'utf-8');\r\n  };\r\n\r\n  const parseQuestions = (content: string): Question[] => {\r\n    const questions: Question[] = [];\r\n    \r\n    // Dividir por líneas en blanco (doble salto de línea)\r\n    const questionBlocks = content.split(/\\n\\s*\\n/).filter(block => block.trim());\r\n    \r\n    questionBlocks.forEach(block => {\r\n      const lines = block.trim().split('\\n').map(line => line.trim());\r\n      \r\n      let questionText = \"\";\r\n      const options: string[] = [];\r\n      let correctAnswer = \"\";\r\n      \r\n      lines.forEach(line => {\r\n        if (line.toLowerCase().startsWith('pregunta:')) {\r\n          questionText = line.substring(9).trim(); // Quitar \"Pregunta:\"\r\n        } else if (line.match(/^\\*?[a-d]:/i)) {\r\n          // Verificar si la línea empieza con asterisco\r\n          const isCorrect = line.startsWith('*');\r\n          \r\n          // Obtener la letra (con o sin asterisco)\r\n          const letter = isCorrect ? line.charAt(1).toUpperCase() : line.charAt(0).toUpperCase();\r\n          \r\n          // Obtener el texto de la opción (saltando \"a:\" o \"*a:\")\r\n          const optionText = isCorrect ? line.substring(3).trim() : line.substring(2).trim();\r\n          \r\n          if (isCorrect) {\r\n            correctAnswer = letter;\r\n          }\r\n          \r\n          options.push(optionText);\r\n        }\r\n      });\r\n      \r\n      // Validar que tenemos todos los datos necesarios\r\n      if (questionText && options.length === 4 && correctAnswer) {\r\n        questions.push({\r\n          tema,\r\n          question: questionText,\r\n          options,\r\n          answer: correctAnswer\r\n        });\r\n      }\r\n    });\r\n    \r\n    return questions;\r\n  };\r\n\r\n  return (\r\n    <div style={{ background: \"#fff\", padding: 16, borderRadius: 8, marginBottom: 24 }}>\r\n      <h2>Importar preguntas desde archivo TXT</h2>\r\n      \r\n      <div style={{ marginBottom: 16 }}>\r\n        <label>\r\n          Tema para todas las preguntas:\r\n          <select value={tema} onChange={e => setTema(e.target.value)}>\r\n            {temas.map(t => (\r\n              <option key={t.value} value={t.value}>{t.label}</option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: 16 }}>\r\n        <label>\r\n          Seleccionar archivo TXT:\r\n          <input\r\n            type=\"file\"\r\n            accept=\".txt\"\r\n            onChange={handleFileUpload}\r\n            style={{ marginLeft: 8 }}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div style={{ background: \"#f5f5f5\", padding: 12, borderRadius: 4, fontSize: \"0.9em\" }}>\r\n        <h4>Formato esperado:</h4>\r\n        <pre>{`Pregunta: ¿Cuál es la capital de Francia?\r\na: Madrid\r\n*b: París\r\nc: Londres\r\nd: Roma\r\n\r\nPregunta: ¿Cuál es la capital de España?\r\n*a: Madrid\r\nb: Barcelona\r\nc: Valencia\r\nd: Sevilla`}</pre>\r\n        <p><strong>Nota:</strong> La respuesta correcta debe empezar con asterisco (*)</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImportTxtQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}