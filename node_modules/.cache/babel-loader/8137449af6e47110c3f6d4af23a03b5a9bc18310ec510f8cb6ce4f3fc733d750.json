{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javis\\\\Desktop\\\\Proyecto de Tests\\\\personal-testing-app\\\\src\\\\ImportTxtQuestions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst temas = [...Array.from({\n  length: 10\n}, (_, i) => ({\n  value: `Tema ${i + 1}`,\n  label: `Parte General - Tema ${i + 1}`\n})), ...Array.from({\n  length: 31\n}, (_, i) => ({\n  value: `Tema ${i + 11}`,\n  label: `Parte Específica - Tema ${i + 11}`\n}))];\nfunction ImportTxtQuestions({\n  onImport\n}) {\n  _s();\n  const [temaDefecto, setTemaDefecto] = useState(temas[0].value);\n  const handleFileUpload = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      var _event$target;\n      const content = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n      const questions = parseQuestions(content);\n      if (questions.length > 0) {\n        onImport(questions);\n        alert(`Se importaron ${questions.length} preguntas correctamente.`);\n      } else {\n        alert(\"No se encontraron preguntas válidas en el archivo.\");\n      }\n    };\n    reader.readAsText(file, 'utf-8');\n  };\n  const parseQuestions = content => {\n    const questions = [];\n\n    // Dividir por líneas en blanco (más flexible)\n    const questionBlocks = content.split(/\\n\\s*\\n/).filter(block => block.trim());\n    questionBlocks.forEach((block, blockIndex) => {\n      const lines = block.trim().split('\\n').map(line => line.trim()).filter(line => line);\n      let questionText = \"\";\n      let temaPregunta = temaDefecto; // Por defecto usar el tema seleccionado\n      const options = [];\n      let correctAnswer = \"\";\n      console.log(`Procesando bloque ${blockIndex + 1}:`, lines);\n      lines.forEach((line, lineIndex) => {\n        console.log(`Línea ${lineIndex + 1}: \"${line}\"`);\n\n        // Detectar tema específico\n        if (line.toLowerCase().startsWith('tema:')) {\n          const temaTexto = line.substring(5).trim();\n          // Buscar el tema por texto o número\n          const temaEncontrado = temas.find(t => t.label.toLowerCase().includes(temaTexto.toLowerCase()) || t.value.toLowerCase() === temaTexto.toLowerCase() || temaTexto.match(/^\\d+$/) && t.value === `Tema ${temaTexto}`);\n          if (temaEncontrado) {\n            temaPregunta = temaEncontrado.value;\n            console.log(`Tema específico detectado: \"${temaPregunta}\"`);\n          }\n        }\n        // Detectar pregunta (más flexible)\n        else if (line.toLowerCase().includes('pregunta:') || lineIndex === 0 && !line.match(/^\\*?[a-d]:/i) && !line.toLowerCase().startsWith('tema:')) {\n          questionText = line.replace(/^pregunta:\\s*/i, '').trim();\n          console.log(`Pregunta detectada: \"${questionText}\"`);\n        }\n        // Detectar opciones\n        else if (line.match(/^\\*?[a-d]:/i)) {\n          const isCorrect = line.startsWith('*');\n          const letter = isCorrect ? line.charAt(1).toUpperCase() : line.charAt(0).toUpperCase();\n          const optionText = isCorrect ? line.substring(3).trim() : line.substring(2).trim();\n          console.log(`Opción ${letter}: \"${optionText}\" ${isCorrect ? '(CORRECTA)' : ''}`);\n          if (isCorrect) {\n            correctAnswer = letter;\n          }\n          options.push(optionText);\n        }\n      });\n      console.log(`Resultado: Tema=\"${temaPregunta}\", Pregunta=\"${questionText}\", Opciones=${options.length}, Respuesta=\"${correctAnswer}\"`);\n\n      // Validar que tenemos todos los datos necesarios\n      if (questionText && options.length === 4 && correctAnswer) {\n        questions.push({\n          tema: temaPregunta,\n          question: questionText,\n          options,\n          answer: correctAnswer\n        });\n        console.log(`✅ Pregunta ${questions.length} añadida correctamente con tema: ${temaPregunta}`);\n      } else {\n        console.log(`❌ Pregunta inválida - faltan datos`);\n      }\n    });\n    console.log(`Total de preguntas procesadas: ${questions.length}`);\n    return questions;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: \"#fff\",\n      padding: 16,\n      borderRadius: 8,\n      marginBottom: 24\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Importar preguntas desde archivo TXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Tema por defecto (si no se especifica en la pregunta):\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: temaDefecto,\n          onChange: e => setTemaDefecto(e.target.value),\n          children: temas.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: t.value,\n            children: t.label\n          }, t.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Seleccionar archivo TXT:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          onChange: handleFileUpload,\n          style: {\n            marginLeft: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#f5f5f5\",\n        padding: 12,\n        borderRadius: 4,\n        fontSize: \"0.9em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Formato esperado (con temas espec\\xEDficos):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `Tema: 1\nPregunta: ¿Cuál es la capital de Francia?\na: Madrid\n*b: París\nc: Londres\nd: Roma\n\nTema: Parte Específica - Tema 15\n¿Cuál es la capital de España?\n*a: Madrid\nb: Barcelona\nc: Valencia\nd: Sevilla\n\nCuál es la capital de Italia (usará tema por defecto)\na: Madrid\nb: París\n*c: Roma\nd: Londres`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Formato de tema:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), \"\\u2022 \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Tema: 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 19\n        }, this), \" \\u2192 Tema 1\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), \"\\u2022 \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Tema: 15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 19\n        }, this), \" \\u2192 Tema 15\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), \"\\u2022 \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Tema: Parte General - Tema 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }, this), \" \\u2192 Busca por texto completo\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), \"\\u2022 Si no se especifica tema, usa el tema por defecto seleccionado\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Nota:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 12\n        }, this), \"- La respuesta correcta debe empezar con asterisco (*) - La pregunta puede tener o no la palabra \\\"Pregunta:\\\" - Separar cada pregunta con una l\\xEDnea en blanco\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(ImportTxtQuestions, \"e7EO3mgC22kBr4tPYOOsUkgbTTc=\");\n_c = ImportTxtQuestions;\nexport default ImportTxtQuestions;\nvar _c;\n$RefreshReg$(_c, \"ImportTxtQuestions\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","temas","Array","from","length","_","i","value","label","ImportTxtQuestions","onImport","_s","temaDefecto","setTemaDefecto","handleFileUpload","e","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","content","result","questions","parseQuestions","alert","readAsText","questionBlocks","split","filter","block","trim","forEach","blockIndex","lines","map","line","questionText","temaPregunta","options","correctAnswer","console","log","lineIndex","toLowerCase","startsWith","temaTexto","substring","temaEncontrado","find","t","includes","match","replace","isCorrect","letter","charAt","toUpperCase","optionText","push","tema","question","answer","style","background","padding","borderRadius","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","accept","marginLeft","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/javis/Desktop/Proyecto de Tests/personal-testing-app/src/ImportTxtQuestions.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Question } from \"./types\";\r\n\r\nconst temas = [\r\n  ...Array.from({ length: 10 }, (_, i) => ({ value: `Tema ${i + 1}`, label: `Parte General - Tema ${i + 1}` })),\r\n  ...Array.from({ length: 31 }, (_, i) => ({ value: `Tema ${i + 11}`, label: `Parte Específica - Tema ${i + 11}` })),\r\n];\r\n\r\nfunction ImportTxtQuestions({ onImport }: { onImport: (qs: Question[]) => void }) {\r\n  const [temaDefecto, setTemaDefecto] = useState(temas[0].value);\r\n\r\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const content = event.target?.result as string;\r\n      const questions = parseQuestions(content);\r\n      if (questions.length > 0) {\r\n        onImport(questions);\r\n        alert(`Se importaron ${questions.length} preguntas correctamente.`);\r\n      } else {\r\n        alert(\"No se encontraron preguntas válidas en el archivo.\");\r\n      }\r\n    };\r\n    reader.readAsText(file, 'utf-8');\r\n  };\r\n\r\n  const parseQuestions = (content: string): Question[] => {\r\n    const questions: Question[] = [];\r\n    \r\n    // Dividir por líneas en blanco (más flexible)\r\n    const questionBlocks = content.split(/\\n\\s*\\n/).filter(block => block.trim());\r\n    \r\n    questionBlocks.forEach((block, blockIndex) => {\r\n      const lines = block.trim().split('\\n').map(line => line.trim()).filter(line => line);\r\n      \r\n      let questionText = \"\";\r\n      let temaPregunta = temaDefecto; // Por defecto usar el tema seleccionado\r\n      const options: string[] = [];\r\n      let correctAnswer = \"\";\r\n      \r\n      console.log(`Procesando bloque ${blockIndex + 1}:`, lines);\r\n      \r\n      lines.forEach((line, lineIndex) => {\r\n        console.log(`Línea ${lineIndex + 1}: \"${line}\"`);\r\n        \r\n        // Detectar tema específico\r\n        if (line.toLowerCase().startsWith('tema:')) {\r\n          const temaTexto = line.substring(5).trim();\r\n          // Buscar el tema por texto o número\r\n          const temaEncontrado = temas.find(t => \r\n            t.label.toLowerCase().includes(temaTexto.toLowerCase()) ||\r\n            t.value.toLowerCase() === temaTexto.toLowerCase() ||\r\n            temaTexto.match(/^\\d+$/) && t.value === `Tema ${temaTexto}`\r\n          );\r\n          if (temaEncontrado) {\r\n            temaPregunta = temaEncontrado.value;\r\n            console.log(`Tema específico detectado: \"${temaPregunta}\"`);\r\n          }\r\n        }\r\n        // Detectar pregunta (más flexible)\r\n        else if (line.toLowerCase().includes('pregunta:') || \r\n                (lineIndex === 0 && !line.match(/^\\*?[a-d]:/i) && !line.toLowerCase().startsWith('tema:'))) {\r\n          questionText = line.replace(/^pregunta:\\s*/i, '').trim();\r\n          console.log(`Pregunta detectada: \"${questionText}\"`);\r\n        } \r\n        // Detectar opciones\r\n        else if (line.match(/^\\*?[a-d]:/i)) {\r\n          const isCorrect = line.startsWith('*');\r\n          const letter = isCorrect ? line.charAt(1).toUpperCase() : line.charAt(0).toUpperCase();\r\n          const optionText = isCorrect ? line.substring(3).trim() : line.substring(2).trim();\r\n          \r\n          console.log(`Opción ${letter}: \"${optionText}\" ${isCorrect ? '(CORRECTA)' : ''}`);\r\n          \r\n          if (isCorrect) {\r\n            correctAnswer = letter;\r\n          }\r\n          \r\n          options.push(optionText);\r\n        }\r\n      });\r\n      \r\n      console.log(`Resultado: Tema=\"${temaPregunta}\", Pregunta=\"${questionText}\", Opciones=${options.length}, Respuesta=\"${correctAnswer}\"`);\r\n      \r\n      // Validar que tenemos todos los datos necesarios\r\n      if (questionText && options.length === 4 && correctAnswer) {\r\n        questions.push({\r\n          tema: temaPregunta,\r\n          question: questionText,\r\n          options,\r\n          answer: correctAnswer\r\n        });\r\n        console.log(`✅ Pregunta ${questions.length} añadida correctamente con tema: ${temaPregunta}`);\r\n      } else {\r\n        console.log(`❌ Pregunta inválida - faltan datos`);\r\n      }\r\n    });\r\n    \r\n    console.log(`Total de preguntas procesadas: ${questions.length}`);\r\n    return questions;\r\n  };\r\n\r\n  return (\r\n    <div style={{ background: \"#fff\", padding: 16, borderRadius: 8, marginBottom: 24 }}>\r\n      <h2>Importar preguntas desde archivo TXT</h2>\r\n      \r\n      <div style={{ marginBottom: 16 }}>\r\n        <label>\r\n          Tema por defecto (si no se especifica en la pregunta):\r\n          <select value={temaDefecto} onChange={e => setTemaDefecto(e.target.value)}>\r\n            {temas.map(t => (\r\n              <option key={t.value} value={t.value}>{t.label}</option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: 16 }}>\r\n        <label>\r\n          Seleccionar archivo TXT:\r\n          <input\r\n            type=\"file\"\r\n            accept=\".txt\"\r\n            onChange={handleFileUpload}\r\n            style={{ marginLeft: 8 }}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div style={{ background: \"#f5f5f5\", padding: 12, borderRadius: 4, fontSize: \"0.9em\" }}>\r\n        <h4>Formato esperado (con temas específicos):</h4>\r\n        <pre>{`Tema: 1\r\nPregunta: ¿Cuál es la capital de Francia?\r\na: Madrid\r\n*b: París\r\nc: Londres\r\nd: Roma\r\n\r\nTema: Parte Específica - Tema 15\r\n¿Cuál es la capital de España?\r\n*a: Madrid\r\nb: Barcelona\r\nc: Valencia\r\nd: Sevilla\r\n\r\nCuál es la capital de Italia (usará tema por defecto)\r\na: Madrid\r\nb: París\r\n*c: Roma\r\nd: Londres`}</pre>\r\n        <p><strong>Formato de tema:</strong>\r\n          <br />• <code>Tema: 1</code> → Tema 1\r\n          <br />• <code>Tema: 15</code> → Tema 15\r\n          <br />• <code>Tema: Parte General - Tema 3</code> → Busca por texto completo\r\n          <br />• Si no se especifica tema, usa el tema por defecto seleccionado\r\n        </p>\r\n        <p><strong>Nota:</strong> \r\n          - La respuesta correcta debe empezar con asterisco (*)\r\n          - La pregunta puede tener o no la palabra \"Pregunta:\"\r\n          - Separar cada pregunta con una línea en blanco\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImportTxtQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}