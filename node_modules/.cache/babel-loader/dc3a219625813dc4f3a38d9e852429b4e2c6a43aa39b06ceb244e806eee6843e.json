{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javis\\\\Desktop\\\\Proyecto de Tests\\\\personal-testing-app\\\\src\\\\ImportTxtQuestions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst temas = [...Array.from({\n  length: 10\n}, (_, i) => ({\n  value: `Tema ${i + 1}`,\n  label: `Parte General - Tema ${i + 1}`\n})), ...Array.from({\n  length: 31\n}, (_, i) => ({\n  value: `Tema ${i + 11}`,\n  label: `Parte Específica - Tema ${i + 11}`\n}))];\nexport default function ImportTxtQuestions({\n  onImport\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [modo, setModo] = useState(null);\n  const [testQuestions, setTestQuestions] = useState([]);\n  const [current, setCurrent] = useState(0);\n  const [temaSeleccionado, setTemaSeleccionado] = useState(null);\n  const [pendingModo, setPendingModo] = useState(null);\n  const [answers, setAnswers] = useState({});\n  const handleFileChange = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      var _event$target;\n      const text = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n      const questions = parseQuestionsFromTxt(text);\n      if (questions.length > 0) {\n        setQuestions(questions);\n        setCurrent(0);\n        setTestQuestions([]);\n        setTemaSeleccionado(temas[0].value);\n      } else {\n        alert(\"No se han detectado preguntas en el archivo.\");\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Parser: detecta opciones y la correcta entre asteriscos\n  function parseQuestionsFromTxt(text) {\n    const blocks = text.split(/\\n\\s*\\n/);\n    return blocks.map(block => {\n      const preguntaMatch = block.match(/Pregunta:\\s*(.+)/i) || block.match(/^(.+)$/m);\n      const opciones = [];\n      let answer = \"\";\n      const optionRegex = /^(\\*?)([a-dA-D])\\)\\s*(.*?)\\*?$/gim;\n      let match;\n      while ((match = optionRegex.exec(block)) !== null) {\n        const isCorrect = match[1] === \"*\" || match[0].trim().endsWith(\"*\");\n        const letra = match[2].toUpperCase();\n        const texto = match[3].trim().replace(/\\*$/, \"\");\n        opciones.push(texto);\n        if (isCorrect) answer = letra;\n      }\n      if (preguntaMatch && opciones.length === 4 && answer) {\n        return {\n          question: preguntaMatch[1].trim(),\n          options: opciones,\n          answer\n        };\n      }\n      return null;\n    }).filter(Boolean);\n  }\n  const handleTemaSelect = () => {\n    const preguntaActual = questions[current];\n    setTestQuestions(prev => [...prev, {\n      ...preguntaActual,\n      tema: temaSeleccionado\n    }]);\n    if (current + 1 < questions.length) {\n      setCurrent(current + 1);\n      setTemaSeleccionado(temas[0].value);\n    } else {\n      // Todas asignadas\n      onImport([...testQuestions, {\n        ...preguntaActual,\n        tema: temaSeleccionado\n      }]);\n      setQuestions([]);\n      setCurrent(0);\n      setTestQuestions([]);\n    }\n  };\n  const handleAnswer = letra => {\n    setAnswers(prev => ({\n      ...prev,\n      [current]: letra\n    }));\n  };\n\n  // Si hay preguntas pendientes, muestra el selector de tema\n  if (questions.length > 0) {\n    const pregunta = questions[current];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#fff\",\n        padding: 16,\n        borderRadius: 8,\n        marginBottom: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Asigna un tema a la pregunta \", current + 1, \" de \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Pregunta:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), \" \", pregunta.question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Opciones:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: pregunta.options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [[\"A\", \"B\", \"C\", \"D\"][i], \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), \" \", opt, \" \", pregunta.answer === [\"A\", \"B\", \"C\", \"D\"][i] ? \"✅\" : \"\"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Tema:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: temaSeleccionado,\n            onChange: e => setTemaSeleccionado(e.target.value),\n            children: temas.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.value,\n              children: t.label\n            }, t.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTemaSelect,\n        children: \"Guardar y continuar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Si no hay preguntas pendientes, muestra el input de archivo\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"1rem 0\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Importar preguntas desde TXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".txt\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"0.9em\"\n      },\n      children: [\"El archivo debe tener el formato:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 42\n      }, this), \"Pregunta: \\xBFTexto de la pregunta?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 41\n      }, this), \"a) Opci\\xF3n A\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 20\n      }, this), \"*b) Opci\\xF3n B*  \\u2190 la respuesta correcta va entre asteriscos\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 67\n      }, this), \"c) Opci\\xF3n C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 20\n      }, this), \"d) Opci\\xF3n D\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 20\n      }, this), \"(l\\xEDnea en blanco entre preguntas)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(ImportTxtQuestions, \"+RScByNSj8wBhHp5bnwtCcIenPs=\");\n_c = ImportTxtQuestions;\nvar _c;\n$RefreshReg$(_c, \"ImportTxtQuestions\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","temas","Array","from","length","_","i","value","label","ImportTxtQuestions","onImport","_s","questions","setQuestions","modo","setModo","testQuestions","setTestQuestions","current","setCurrent","temaSeleccionado","setTemaSeleccionado","pendingModo","setPendingModo","answers","setAnswers","handleFileChange","e","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","text","result","parseQuestionsFromTxt","alert","readAsText","blocks","split","map","block","preguntaMatch","match","opciones","answer","optionRegex","exec","isCorrect","trim","endsWith","letra","toUpperCase","texto","replace","push","question","options","filter","Boolean","handleTemaSelect","preguntaActual","prev","tema","handleAnswer","pregunta","style","background","padding","borderRadius","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","opt","onChange","t","onClick","margin","type","accept","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/javis/Desktop/Proyecto de Tests/personal-testing-app/src/ImportTxtQuestions.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Question } from \"./types\";\r\n\r\nconst temas = [\r\n  ...Array.from({ length: 10 }, (_, i) => ({ value: `Tema ${i + 1}`, label: `Parte General - Tema ${i + 1}` })),\r\n  ...Array.from({ length: 31 }, (_, i) => ({ value: `Tema ${i + 11}`, label: `Parte Específica - Tema ${i + 11}` })),\r\n];\r\n\r\ntype Props = {\r\n  onImport: (questions: Question[]) => void;\r\n};\r\n\r\nexport default function ImportTxtQuestions({ onImport }: Props) {\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [modo, setModo] = useState<string | null>(null);\r\n  const [testQuestions, setTestQuestions] = useState<Question[]>([]);\r\n  const [current, setCurrent] = useState(0);\r\n  const [temaSeleccionado, setTemaSeleccionado] = useState<string | null>(null);\r\n  const [pendingModo, setPendingModo] = useState<string | null>(null);\r\n  const [answers, setAnswers] = useState<{ [index: number]: string }>({});\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const text = event.target?.result as string;\r\n      const questions = parseQuestionsFromTxt(text);\r\n      if (questions.length > 0) {\r\n        setQuestions(questions);\r\n        setCurrent(0);\r\n        setTestQuestions([]);\r\n        setTemaSeleccionado(temas[0].value);\r\n      } else {\r\n        alert(\"No se han detectado preguntas en el archivo.\");\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Parser: detecta opciones y la correcta entre asteriscos\r\n  function parseQuestionsFromTxt(text: string): Omit<Question, \"tema\">[] {\r\n    const blocks = text.split(/\\n\\s*\\n/);\r\n    return blocks\r\n      .map((block) => {\r\n        const preguntaMatch = block.match(/Pregunta:\\s*(.+)/i) || block.match(/^(.+)$/m);\r\n        const opciones: string[] = [];\r\n        let answer = \"\";\r\n        const optionRegex = /^(\\*?)([a-dA-D])\\)\\s*(.*?)\\*?$/gim;\r\n        let match;\r\n        while ((match = optionRegex.exec(block)) !== null) {\r\n          const isCorrect = match[1] === \"*\" || match[0].trim().endsWith(\"*\");\r\n          const letra = match[2].toUpperCase();\r\n          const texto = match[3].trim().replace(/\\*$/, \"\");\r\n          opciones.push(texto);\r\n          if (isCorrect) answer = letra;\r\n        }\r\n        if (preguntaMatch && opciones.length === 4 && answer) {\r\n          return {\r\n            question: preguntaMatch[1].trim(),\r\n            options: opciones,\r\n            answer,\r\n          };\r\n        }\r\n        return null;\r\n      })\r\n      .filter(Boolean) as Omit<Question, \"tema\">[];\r\n  }\r\n\r\n  const handleTemaSelect = () => {\r\n    const preguntaActual = questions[current];\r\n    setTestQuestions((prev) => [\r\n      ...prev,\r\n      { ...preguntaActual, tema: temaSeleccionado },\r\n    ]);\r\n    if (current + 1 < questions.length) {\r\n      setCurrent(current + 1);\r\n      setTemaSeleccionado(temas[0].value);\r\n    } else {\r\n      // Todas asignadas\r\n      onImport([\r\n        ...testQuestions,\r\n        { ...preguntaActual, tema: temaSeleccionado },\r\n      ]);\r\n      setQuestions([]);\r\n      setCurrent(0);\r\n      setTestQuestions([]);\r\n    }\r\n  };\r\n\r\n  const handleAnswer = (letra: string) => {\r\n    setAnswers((prev) => ({ ...prev, [current]: letra }));\r\n  };\r\n\r\n  // Si hay preguntas pendientes, muestra el selector de tema\r\n  if (questions.length > 0) {\r\n    const pregunta = questions[current];\r\n    return (\r\n      <div style={{ background: \"#fff\", padding: 16, borderRadius: 8, marginBottom: 24 }}>\r\n        <h2>Asigna un tema a la pregunta {current + 1} de {questions.length}</h2>\r\n        <div>\r\n          <b>Pregunta:</b> {pregunta.question}\r\n        </div>\r\n        <div>\r\n          <b>Opciones:</b>\r\n          <ul>\r\n            {pregunta.options.map((opt, i) => (\r\n              <li key={i}>\r\n                <b>{[\"A\", \"B\", \"C\", \"D\"][i]}:</b> {opt} {pregunta.answer === [\"A\", \"B\", \"C\", \"D\"][i] ? \"✅\" : \"\"}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            Tema:\r\n            <select value={temaSeleccionado} onChange={e => setTemaSeleccionado(e.target.value)}>\r\n              {temas.map(t => (\r\n                <option key={t.value} value={t.value}>{t.label}</option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        </div>\r\n        <button onClick={handleTemaSelect}>Guardar y continuar</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Si no hay preguntas pendientes, muestra el input de archivo\r\n  return (\r\n    <div style={{ margin: \"1rem 0\" }}>\r\n      <h2>Importar preguntas desde TXT</h2>\r\n      <input type=\"file\" accept=\".txt\" onChange={handleFileChange} />\r\n      <p style={{ fontSize: \"0.9em\" }}>\r\n        El archivo debe tener el formato:<br />\r\n        Pregunta: ¿Texto de la pregunta?<br />\r\n        a) Opción A<br />\r\n        *b) Opción B*  ← la respuesta correcta va entre asteriscos<br />\r\n        c) Opción C<br />\r\n        d) Opción D<br />\r\n        (línea en blanco entre preguntas)\r\n      </p>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}