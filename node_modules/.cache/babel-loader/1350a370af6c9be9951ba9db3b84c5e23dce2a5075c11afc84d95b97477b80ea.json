{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javis\\\\Desktop\\\\Proyecto de Tests\\\\personal-testing-app\\\\src\\\\ImportTxtQuestions.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ImportTxtQuestions({\n  onImport\n}) {\n  const handleFileChange = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      var _event$target;\n      const text = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n      const questions = parseQuestionsFromTxt(text);\n      onImport(questions);\n    };\n    reader.readAsText(file);\n  };\n\n  // Formato esperado:\n  // Tema: Tema 1\n  // Pregunta: ¿Cuál es la capital de España?\n  // A) Madrid\n  // B) Barcelona\n  // C) Valencia\n  // D) Sevilla\n  // Respuesta: A\n  // (línea en blanco entre preguntas)\n  function parseQuestionsFromTxt(text) {\n    const blocks = text.split(/\\n\\s*\\n/);\n    return blocks.map(block => {\n      const temaMatch = block.match(/Tema:\\s*(.+)/i);\n      const preguntaMatch = block.match(/Pregunta:\\s*(.+)/i);\n\n      // Busca las opciones (a-d), detectando la que está entre asteriscos\n      const optionRegex = /^(\\*?)([a-dA-D])\\)\\s*(.*?)\\*?$/gim;\n      let match;\n      const options = [];\n      let answer = \"\";\n      while ((match = optionRegex.exec(block)) !== null) {\n        const isCorrect = match[1] === \"*\" || match[0].trim().endsWith(\"*\");\n        const letra = match[2].toUpperCase();\n        const texto = match[3].trim().replace(/\\*$/, \"\");\n        options.push(`${letra}) ${texto}`);\n        if (isCorrect) answer = letra;\n      }\n      if (temaMatch && preguntaMatch && options.length === 4 && answer) {\n        return {\n          tema: temaMatch[1].trim(),\n          question: preguntaMatch[1].trim(),\n          options: options.map(opt => opt.replace(/^[A-Da-d]\\)\\s*/, \"\")),\n          // solo el texto\n          answer\n        };\n      }\n      return null;\n    }).filter(Boolean);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"1rem 0\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Importar preguntas desde TXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".txt\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"0.9em\"\n      },\n      children: [\"El archivo debe tener el formato:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 42\n      }, this), \"Tema: Tema 1\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), \"Pregunta: \\xBFTexto de la pregunta?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 41\n      }, this), \"A) Opci\\xF3n A\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }, this), \"B) Opci\\xF3n B\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 20\n      }, this), \"C) Opci\\xF3n C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 20\n      }, this), \"D) Opci\\xF3n D\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this), \"Respuesta: A\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), \"(l\\xEDnea en blanco entre preguntas)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_c = ImportTxtQuestions;\nvar _c;\n$RefreshReg$(_c, \"ImportTxtQuestions\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ImportTxtQuestions","onImport","handleFileChange","e","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","text","result","questions","parseQuestionsFromTxt","readAsText","blocks","split","map","block","temaMatch","match","preguntaMatch","optionRegex","options","answer","exec","isCorrect","trim","endsWith","letra","toUpperCase","texto","replace","push","length","tema","question","opt","filter","Boolean","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/javis/Desktop/Proyecto de Tests/personal-testing-app/src/ImportTxtQuestions.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Question } from \"./types\";\r\n\r\ntype Props = {\r\n  onImport: (questions: Question[]) => void;\r\n};\r\n\r\nexport default function ImportTxtQuestions({ onImport }: Props) {\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const text = event.target?.result as string;\r\n      const questions = parseQuestionsFromTxt(text);\r\n      onImport(questions);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Formato esperado:\r\n  // Tema: Tema 1\r\n  // Pregunta: ¿Cuál es la capital de España?\r\n  // A) Madrid\r\n  // B) Barcelona\r\n  // C) Valencia\r\n  // D) Sevilla\r\n  // Respuesta: A\r\n  // (línea en blanco entre preguntas)\r\n  function parseQuestionsFromTxt(text: string): Question[] {\r\n    const blocks = text.split(/\\n\\s*\\n/);\r\n    return blocks\r\n      .map((block) => {\r\n        const temaMatch = block.match(/Tema:\\s*(.+)/i);\r\n        const preguntaMatch = block.match(/Pregunta:\\s*(.+)/i);\r\n\r\n        // Busca las opciones (a-d), detectando la que está entre asteriscos\r\n        const optionRegex = /^(\\*?)([a-dA-D])\\)\\s*(.*?)\\*?$/gim;\r\n        let match;\r\n        const options: string[] = [];\r\n        let answer = \"\";\r\n        while ((match = optionRegex.exec(block)) !== null) {\r\n          const isCorrect = match[1] === \"*\" || match[0].trim().endsWith(\"*\");\r\n          const letra = match[2].toUpperCase();\r\n          const texto = match[3].trim().replace(/\\*$/, \"\");\r\n          options.push(`${letra}) ${texto}`);\r\n          if (isCorrect) answer = letra;\r\n        }\r\n\r\n        if (\r\n          temaMatch &&\r\n          preguntaMatch &&\r\n          options.length === 4 &&\r\n          answer\r\n        ) {\r\n          return {\r\n            tema: temaMatch[1].trim(),\r\n            question: preguntaMatch[1].trim(),\r\n            options: options.map(opt => opt.replace(/^[A-Da-d]\\)\\s*/, \"\")), // solo el texto\r\n            answer,\r\n          } as Question;\r\n        }\r\n        return null;\r\n      })\r\n      .filter(Boolean) as Question[];\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: \"1rem 0\" }}>\r\n      <h2>Importar preguntas desde TXT</h2>\r\n      <input type=\"file\" accept=\".txt\" onChange={handleFileChange} />\r\n      <p style={{ fontSize: \"0.9em\" }}>\r\n        El archivo debe tener el formato:<br />\r\n        Tema: Tema 1<br />\r\n        Pregunta: ¿Texto de la pregunta?<br />\r\n        A) Opción A<br />\r\n        B) Opción B<br />\r\n        C) Opción C<br />\r\n        D) Opción D<br />\r\n        Respuesta: A<br />\r\n        (línea en blanco entre preguntas)\r\n      </p>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}